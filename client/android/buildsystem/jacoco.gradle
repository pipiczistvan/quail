def modules = [
        'app',
        'integration',
        'network',
        'persistence'
]

def excludes = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',

        '**/databinding/*.*',

        //Dagger 2
        '**/*Dagger*Component*.*',
        '**/*Module.*',
        '**/*Module$*.*',
        '**/*MembersInjector*.*',
        '**/*_Factory*.*',
        '**/*Provide*Factory*.*'
]

jacoco {
    toolVersion = "0.8.4"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = true
                xml.enabled = true
            }

            def classDirs = modules.collect { module -> fileTree(dir: "$project.rootDir/${module}/build/tmp/kotlin-classes/${variantName}", excludes: excludes) }
            def coverageSourceDirs = modules.collect { module -> "$project.rootDir/${module}/src/main/kotlin" }
            def execFiles = modules.collect { module -> "$project.rootDir/${module}/build/jacoco/${testTaskName}.exec" }

            classDirectories = files(classDirs)
            additionalSourceDirs = files(coverageSourceDirs)
            sourceDirectories = files(coverageSourceDirs)
            executionData = files(execFiles)
        }
    }
}
